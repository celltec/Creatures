#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'app':
            Get shader desc: app_shader_desc()
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_IN_pos = 0
                    ATTR_vs_IN_uv = 1
                    ATTR_vs_IN_radius = 2
                    ATTR_vs_IN_fill = 3
                    ATTR_vs_IN_outline = 4
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs


    Shader descriptor structs:

        sg_shader app = sg_make_shader(app_shader_desc());

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_IN_pos] = { ... },
                    [ATTR_vs_IN_uv] = { ... },
                    [ATTR_vs_IN_radius] = { ... },
                    [ATTR_vs_IN_fill] = { ... },
                    [ATTR_vs_IN_outline] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]


    Bind slot and C-struct for uniform block 'vs_params':

        vs_params_t vs_params = {
            .mvp = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_params, &vs_params, sizeof(vs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_IN_pos (0)
#define ATTR_vs_IN_uv (1)
#define ATTR_vs_IN_radius (2)
#define ATTR_vs_IN_fill (3)
#define ATTR_vs_IN_outline (4)
#define SLOT_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    hmm_mat4 mvp;
} vs_params_t;
#pragma pack(pop)
#if defined(SOKOL_D3D11)
/*
    struct s_frag
    {
        float2 uv;
        float4 fill;
        float4 outline;
    };
    
    cbuffer vs_params : register(b0)
    {
        row_major float4x4 _20_mvp : packoffset(c0);
    };
    
    
    static float4 gl_Position;
    static float2 IN_pos;
    static float IN_radius;
    static float2 IN_uv;
    static s_frag FRAG;
    static float4 IN_fill;
    static float4 IN_outline;
    
    struct SPIRV_Cross_Input
    {
        float2 IN_pos : TEXCOORD0;
        float2 IN_uv : TEXCOORD1;
        float IN_radius : TEXCOORD2;
        float4 IN_fill : TEXCOORD3;
        float4 IN_outline : TEXCOORD4;
    };
    
    struct SPIRV_Cross_Output
    {
        s_frag FRAG : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };
    
    #line 24 ""
    void vert_main()
    {
    #line 24 ""
        gl_Position = mul(float4(IN_pos + (IN_uv * IN_radius), 0.0f, 0.0f), _20_mvp);
        FRAG.uv = IN_uv;
    #line 26 ""
        FRAG.fill = IN_fill;
    #line 27 ""
        float3 _60 = FRAG.fill.xyz * IN_fill.w;
        FRAG.fill = float4(_60.x, _60.y, _60.z, FRAG.fill.w);
    #line 28 ""
        FRAG.outline = IN_outline;
    #line 29 ""
        FRAG.outline.w *= IN_outline.w;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        IN_pos = stage_input.IN_pos;
        IN_radius = stage_input.IN_radius;
        IN_uv = stage_input.IN_uv;
        IN_fill = stage_input.IN_fill;
        IN_outline = stage_input.IN_outline;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.FRAG = FRAG;
        return stage_output;
    }
*/
static const char vs_source_hlsl5[1399] = {
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x73,0x5f,0x66,0x72,0x61,0x67,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x69,0x6c,0x6c,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x6c,0x69,
    0x6e,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,
    0x34,0x20,0x5f,0x32,0x30,0x5f,0x6d,0x76,0x70,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x49,0x4e,0x5f,0x70,0x6f,0x73,
    0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x49,
    0x4e,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x49,0x4e,0x5f,0x75,0x76,0x3b,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x73,0x5f,0x66,0x72,0x61,0x67,0x20,0x46,0x52,0x41,
    0x47,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x49,0x4e,0x5f,0x66,0x69,0x6c,0x6c,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x49,0x4e,0x5f,0x6f,0x75,0x74,0x6c,0x69,
    0x6e,0x65,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x49,0x4e,0x5f,0x70,0x6f,
    0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x49,0x4e,0x5f,0x75,0x76,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x49,0x4e,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x49,0x4e,0x5f,0x66,0x69,0x6c,0x6c,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x33,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x49,0x4e,0x5f,0x6f,0x75,0x74,0x6c,
    0x69,0x6e,0x65,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x34,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x73,0x5f,0x66,0x72,0x61,0x67,0x20,0x46,0x52,0x41,0x47,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x34,
    0x20,0x22,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x34,0x20,
    0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x49,0x4e,0x5f,0x70,0x6f,0x73,0x20,0x2b,0x20,0x28,0x49,0x4e,0x5f,0x75,0x76,0x20,
    0x2a,0x20,0x49,0x4e,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x32,0x30,0x5f,0x6d,
    0x76,0x70,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x46,0x52,0x41,0x47,0x2e,0x75,0x76,
    0x20,0x3d,0x20,0x49,0x4e,0x5f,0x75,0x76,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x32,0x36,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x46,0x52,0x41,0x47,0x2e,0x66,
    0x69,0x6c,0x6c,0x20,0x3d,0x20,0x49,0x4e,0x5f,0x66,0x69,0x6c,0x6c,0x3b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x32,0x37,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x36,0x30,0x20,0x3d,0x20,0x46,0x52,0x41,0x47,
    0x2e,0x66,0x69,0x6c,0x6c,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x49,0x4e,0x5f,0x66,
    0x69,0x6c,0x6c,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x46,0x52,0x41,0x47,0x2e,
    0x66,0x69,0x6c,0x6c,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x5f,0x36,
    0x30,0x2e,0x78,0x2c,0x20,0x5f,0x36,0x30,0x2e,0x79,0x2c,0x20,0x5f,0x36,0x30,0x2e,
    0x7a,0x2c,0x20,0x46,0x52,0x41,0x47,0x2e,0x66,0x69,0x6c,0x6c,0x2e,0x77,0x29,0x3b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x38,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x46,0x52,0x41,0x47,0x2e,0x6f,0x75,0x74,0x6c,0x69,0x6e,0x65,0x20,0x3d,0x20,
    0x49,0x4e,0x5f,0x6f,0x75,0x74,0x6c,0x69,0x6e,0x65,0x3b,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x32,0x39,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x46,0x52,0x41,0x47,
    0x2e,0x6f,0x75,0x74,0x6c,0x69,0x6e,0x65,0x2e,0x77,0x20,0x2a,0x3d,0x20,0x49,0x4e,
    0x5f,0x6f,0x75,0x74,0x6c,0x69,0x6e,0x65,0x2e,0x77,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x49,0x4e,0x5f,0x70,
    0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x2e,0x49,0x4e,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x49,0x4e,0x5f,
    0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x49,0x4e,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x49,0x4e,0x5f,0x75,0x76,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x49,0x4e,0x5f,0x75,0x76,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x49,0x4e,0x5f,0x66,0x69,0x6c,0x6c,0x20,0x3d,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x49,0x4e,0x5f,0x66,0x69,0x6c,0x6c,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x49,0x4e,0x5f,0x6f,0x75,0x74,0x6c,0x69,0x6e,0x65,
    0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x49,
    0x4e,0x5f,0x6f,0x75,0x74,0x6c,0x69,0x6e,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x46,0x52,
    0x41,0x47,0x20,0x3d,0x20,0x46,0x52,0x41,0x47,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    struct s_frag
    {
        float2 uv;
        float4 fill;
        float4 outline;
    };
    
    static s_frag FRAG;
    static float4 OUT_color;
    
    struct SPIRV_Cross_Input
    {
        s_frag FRAG : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 OUT_color : SV_Target0;
    };
    
    #line 16 ""
    void frag_main()
    {
    #line 16 ""
        float _20 = length(FRAG.uv);
        float _25 = length(fwidth(FRAG.uv));
        float _36 = 1.0f - _25;
    #line 22 ""
        OUT_color = (FRAG.fill + ((FRAG.outline - (FRAG.fill * FRAG.outline.w)) * smoothstep(_36 - _25, _36, _20))) * smoothstep(-1.0f, _25 - 1.0f, -_20);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        FRAG = stage_input.FRAG;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.OUT_color = OUT_color;
        return stage_output;
    }
*/
static const char fs_source_hlsl5[764] = {
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x73,0x5f,0x66,0x72,0x61,0x67,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x69,0x6c,0x6c,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x6c,0x69,
    0x6e,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x73,
    0x5f,0x66,0x72,0x61,0x67,0x20,0x46,0x52,0x41,0x47,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x4f,0x55,0x54,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x73,0x5f,0x66,0x72,0x61,0x67,0x20,0x46,0x52,0x41,0x47,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x4f,0x55,0x54,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x22,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x30,0x20,0x3d,0x20,
    0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x46,0x52,0x41,0x47,0x2e,0x75,0x76,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x35,0x20,0x3d,
    0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x66,0x77,0x69,0x64,0x74,0x68,0x28,0x46,
    0x52,0x41,0x47,0x2e,0x75,0x76,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x33,0x36,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,0x20,0x2d,
    0x20,0x5f,0x32,0x35,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x32,0x20,0x22,
    0x22,0x0a,0x20,0x20,0x20,0x20,0x4f,0x55,0x54,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x28,0x46,0x52,0x41,0x47,0x2e,0x66,0x69,0x6c,0x6c,0x20,0x2b,0x20,0x28,
    0x28,0x46,0x52,0x41,0x47,0x2e,0x6f,0x75,0x74,0x6c,0x69,0x6e,0x65,0x20,0x2d,0x20,
    0x28,0x46,0x52,0x41,0x47,0x2e,0x66,0x69,0x6c,0x6c,0x20,0x2a,0x20,0x46,0x52,0x41,
    0x47,0x2e,0x6f,0x75,0x74,0x6c,0x69,0x6e,0x65,0x2e,0x77,0x29,0x29,0x20,0x2a,0x20,
    0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x5f,0x33,0x36,0x20,0x2d,
    0x20,0x5f,0x32,0x35,0x2c,0x20,0x5f,0x33,0x36,0x2c,0x20,0x5f,0x32,0x30,0x29,0x29,
    0x29,0x20,0x2a,0x20,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x2d,
    0x31,0x2e,0x30,0x66,0x2c,0x20,0x5f,0x32,0x35,0x20,0x2d,0x20,0x31,0x2e,0x30,0x66,
    0x2c,0x20,0x2d,0x5f,0x32,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,
    0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x46,0x52,0x41,0x47,0x20,0x3d,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x46,0x52,0x41,0x47,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x4f,0x55,0x54,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x4f,0x55,0x54,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
static const sg_shader_desc app_shader_desc_hlsl5 = {
  0, /* _start_canary */
  { /*attrs*/{"IN_pos","TEXCOORD",0},{"IN_uv","TEXCOORD",1},{"IN_radius","TEXCOORD",2},{"IN_fill","TEXCOORD",3},{"IN_outline","TEXCOORD",4},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}, },
  { /* vs */
    vs_source_hlsl5, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        64, /* size */
        { /* uniforms */{"vs_params",SG_UNIFORMTYPE_FLOAT4,4},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  { /* fs */
    fs_source_hlsl5, /* source */
    0,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0},{0,SG_UNIFORMTYPE_INVALID,0}, },
      },
    },
    { /* images */ {0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT},{0,_SG_IMAGETYPE_DEFAULT}, },
  },
  "app_shader", /* label */
  0, /* _end_canary */
};
#endif /* SOKOL_D3D11 */
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before d3d11.h"
#endif
static inline const sg_shader_desc* app_shader_desc(void) {
    #if defined(SOKOL_D3D11)
    if (sg_query_backend() == SG_BACKEND_D3D11) {
        return &app_shader_desc_hlsl5;
    }
    #endif /* SOKOL_D3D11 */
    return 0; /* can't happen */
}
